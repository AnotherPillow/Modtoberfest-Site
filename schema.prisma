datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Participant       Participant?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Participant {
  id          String  @id @default(cuid())
  accountId   String @unique
  admin       Boolean @default(false)
  discordUser String?
  githubId    String @unique
  account     Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([id, githubId])
}

model Sponsor {
  id                    String  @id @default(cuid())
  name                  String
  image_url             String
  summary               String  @db.Text
  website_url           String?
  github_user           String?
  twitter_handle        String?
  subreddit             String?
  discord               String?
  SponsoredRepository   SponsoredRepository[]
}


model Repository {
  id                String  @id @default(cuid())
  repository_id     String  @unique
  url               String
  valid             Boolean @default(false)

  @@unique([id])
  SponsoredRepository       SponsoredRepository?
}

model SponsoredRepository {
    id              String @id @default(cuid())
    repository_id   String @unique
    sponsor_id      String

    repository      Repository @relation(fields: [repository_id], references: [repository_id], onDelete: Cascade)
    sponsor         Sponsor @relation(fields: [sponsor_id], references: [id], onDelete: Cascade)

    @@unique([id])
}


model PullRequest {
  id String  @id @default(cuid())
  pr_id Int  @unique
  html_url String
  number Int
  state String
  title String @db.Text
  author String
  author_id String
  created_at DateTime
  owner String
  owner_id String
  owner_avatar_url String @db.Text
  repo_id String
  repo_name String
  merged Boolean
}
